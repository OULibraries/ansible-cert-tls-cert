---

- name: TLS cert directory exists
  file:
    path: "{{ tls_cert_path }}/{{ item.common_name }}"
    state: directory

- name: copy openssl.cnf
  template:
    src: openssl.cnf.j2
    dest: "{{ tls_cert_path }}/{{ item.common_name }}/openssl.cnf"

- name: TLS key and CSR exist.
  shell: >
     TLS_CERT_CN={{ item.common_name }}
     {% if ((item.alt_names is defined) and (item.alt_names is not none)) %}
     TLS_CERT_SAN="
     {% for alt_name in item.alt_names %}
     {% if ((alt_name is defined) and (alt_name is not none)) %}
     DNS:{{ alt_name }}{{ "," if not loop.last else "" }}
     {% endif %}{% endfor %}"{% else %}
     {% endif %}
     openssl req -config {{ tls_cert_path }}/{{ item.common_name }}/openssl.cnf -new -newkey rsa -nodes
     -keyout {{ tls_cert_path }}/{{ item.common_name }}/privkey.pem
     -out {{ tls_cert_path }}/{{ item.common_name }}/request.csr
  args:
    creates: "{{ tls_cert_path }}/{{ item.common_name }}/privkey.*"
  environment:
    TLS_CERT_C: "{{ tls_cert_country }}"
    TLC_CERT_ST: "{{ tls_cert_state }}"
    TLS_CERT_L: "{{ tls_cert_locality }}"
    TLS_CERT_O: "{{ tls_cert_organization }}"
    TLS_CERT_OU: "{{ tls_cert_department }}"

- name: Encrypted TLS key exists.
  command: >
    ansible-vault encrypt
    {{ tls_cert_path }}/{{ item.common_name }}/privkey.pem
    --output={{ tls_cert_path }}/{{ item.common_name }}/privkey.vault.yml
  args:
    chdir: "{{ tls_cert_path}}/.."
    creates: "{{ tls_cert_path }}/{{ item.common_name }}/privkey.vault.yml"

- name: Unencrypted TLS key is absent.
  file:
    path: "{{ tls_cert_path }}/{{ item.common_name }}/privkey.pem"
    state: absent
